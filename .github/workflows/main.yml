name: Main workflow

on:
  push:
    branches:
      - main

jobs:
  migrate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

      #### Запуск PostgreSQL 16 в контейнере через compose с использованием .env из секретов
    - name: Start PostgreSQL via docker compose with secrets
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        docker compose up -d

      #### Ждем проверки готовности PostgreSQL  
    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL..."
        until docker exec postgres pg_isready -U user; do
          sleep 1
        done
        echo "PostgreSQL is ready"

      #### Создаем рабочую базу данных 
    - name: Create working database
      run: |
        docker exec -u postgres postgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "CREATE DATABASE ${{ secrets.DB_NAME }};"

      #### Создаем пользователя и выдаем привилегии 
    - name: Create user and grant permissions
      run: |
        docker exec -u postgres postgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.DB_NAME }} -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}'';"
        docker exec -u postgres postgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.DB_NAME }} -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DB_NAME }} TO ${{ secrets.DB_USER }};"
        docker exec -u postgres postgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.DB_NAME }} -c "GRANT ALL PRIVILEGES ON SCHEMA public TO ${{ secrets.DB_USER }};"
        docker exec -u postgres postgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.DB_NAME }} -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO ${{ secrets.DB_USER }};"
        docker exec -u postgres postgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.DB_NAME }} -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO ${{ secrets.DB_USER }};"

      #### Устанавливаем Flyway
    - name: Setup Flyway
      run: |
        curl -L -o flyway-commandline.tar.gz "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/11.1.0/flyway-commandline-11.1.0-linux-x64.tar.gz"
        tar -xzf flyway-commandline.tar.gz
        rm flyway-commandline.tar.gz 
        sudo ln -s $(pwd)/flyway-11.1.0/flyway /usr/local/bin/flyway 

      #### Применяем миграции с помощью Flyway до таргета 3 (до создания индексов)
    - name: Run Flyway migrations
      env:
        FLYWAY_URL: jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
        FLYWAY_USER: ${{ secrets.DB_USER }}
        FLYWAY_PASSWORD: ${{ secrets.DB_PASSWORD }}
        FLYWAY_LOCATIONS: filesystem:./migrations
        FLYWAY_TARGET: 3
      run: |
        flyway migrate

      #### Получаем план запроса до создания индексов для сравнения
    - name: Run EXPLAIN ANALYZE VERBOSE before indexes
      run: |
        docker exec postgres psql -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "
          EXPLAIN (ANALYZE, VERBOSE)
          SELECT 
            o.date_created, 
            SUM(op.quantity) 
          FROM orders AS o
          JOIN order_product AS op ON o.id = op.order_id
          WHERE o.status = 'shipped' 
            AND o.date_created > (CURRENT_DATE - INTERVAL '7 DAYS')
          GROUP BY o.date_created;
        "

      #### Применяем миграции с помощью Flyway до таргета 4 (создаем индексы)
    - name: Run Flyway migrations
      env:
        FLYWAY_URL: jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
        FLYWAY_USER: ${{ secrets.DB_USER }}
        FLYWAY_PASSWORD: ${{ secrets.DB_PASSWORD }}
        FLYWAY_LOCATIONS: filesystem:./migrations
        FLYWAY_TARGET: 4
      run: |
        flyway migrate

      #### Обновляем статистику в postgres
    - name: Run ANALYZE orders
      run: |
        docker exec postgres psql -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "
          ANALYZE orders;
        "

      #### Обновляем статистику в postgres
    - name: Run ANALYZE order_product
      run: |
        docker exec postgres psql -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "
          ANALYZE order_product;
        "

      #### Получаем план запроса после создания индексов для сравнения
    - name: Run EXPLAIN ANALYZE VERBOSE after indexes
      run: |
        docker exec postgres psql -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "
          EXPLAIN (ANALYZE, VERBOSE)
          SELECT 
            o.date_created, 
            SUM(op.quantity) 
          FROM orders AS o
          JOIN order_product AS op ON o.id = op.order_id
          WHERE o.status = 'shipped' 
            AND o.date_created > (CURRENT_DATE - INTERVAL '7 DAYS')
          GROUP BY o.date_created;
        "

      #### Получаем результат запроса
    - name: Run query - check results
      run: |
        docker exec postgres psql -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "
          SELECT 
            o.date_created, 
            SUM(op.quantity) 
          FROM orders AS o
          JOIN order_product AS op ON o.id = op.order_id
          WHERE o.status = 'shipped' 
            AND o.date_created > (CURRENT_DATE - INTERVAL '7 DAYS')
          GROUP BY o.date_created;
        "

    ### Этот шаг оставьте без изменений
    - name: Download and setup autotests binaries
      run: |
        wget -qO- cloud-services-engineer.gitlab.yandexcloud.net/practicum-cloud-services/dbops-autotests/-/package_files/1/download > dbopstest
        chmod +x ./dbopstest
        mv ./dbopstest /usr/local/bin/dbopstest

    ### Этот шаг оставьте без изменений
    - name: Test
      run: |
        dbopstest \
          -test.v \
          -host=${{ secrets.DB_HOST }} \
          -port=${{ secrets.DB_PORT }} \
          -user=${{ secrets.DB_USER }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -db=${{ secrets.DB_NAME }}
